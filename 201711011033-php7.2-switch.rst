PHP 7.2's "switch" optimisations
================================

.. articleMetaData::
   :Where: London, UK
   :Date: 2017-11-01 10:33 Europe/London
   :Tags: blog, php, vld
   :Short: php72switch

PHP 7.2 is around the corner soon, and comes with many optimisations. Many new
optimisations are implemented in opcache_, but some others are implemented in
PHP itself. One optimisation that falls in the latter category is an
optimisation of the ``switch``/``case`` construct.

.. _opcache: http://php.net/manual/en/book.opcache.php

Before PHP 7.2, PHP considers each ``case`` statement in order. Let's say we
have the following (trivial code)::

	<?php
	$cc = "no";
	switch ( $cc )
	{
		case 'de': echo "DEUTSCH"; break;
		case 'en': echo "English"; break;
		case 'nl': echo "Nederlands"; break;
		case 'no': echo "Norsk"; break;
		default:
			echo "unknown"; break;
	}
	?>

The PHP interpreter approaches the executing of this ``switch``/``case``
structure as if it was written like::
	
	<?php
	$cc = "no";
	if ($cc == 'de') {
		echo "DEUTSCH";
	} else if ($cc == 'en') {
		echo "English";
	} else if ($cc == 'nl') {
		echo "Nederlands";
	} else if ($cc == 'no') {
		echo "Norsk";
	} else {
		echo "unknown"; break;
	}
	?>

Yup, it really compares ``$cc`` variable to each ``case`` statement one by
one. Which means that if your most commonly used switch case is further down
the list, you end up wasting valuable CPU code.

With vld_ we can represent this in a graph. For each ``case`` statement, the
graph shows that the interpreter can either go *left* or *right*, just as it
was executing multiple ``if`` statements in sequence:

.. image:: images/switch-php71.png 

.. _vld: https://derickrethans.nl/projects.html#vld

PHP 7.2 introduces an optimisation that converts this sequence of ``if``
statements into a jump table if all the ``case`` statements are either
integers **or** strings. If we look at the pseudo code (PHP does not support
variable labels with ``goto``), we get something like::

	<?php
	$cc = "no";
	$_table = [ "de" => 1, "en" => 2, "nl" => 3, "no" => 4 ];
	if (gettype($cc) == 'string') {
		if (array_key_exists($cc, $_table)) {
			goto "jmp_{$_table[$cc]}";
		} else {
			goto jmp_5;
		}
	} else {
		/* do original if/else if/else sequence */
	}
	jmp_1: echo "DEUTSCH"; goto end;
	jmp_2: echo "English"; goto end;
	jmp_3: echo "Nederlands"; goto end;
	jmp_4: echo "Norsk"; goto end;
	jmp_default: echo "unknown";
	end:
	?>

This example shows that as long as ``$cc`` is a string, it will use the jump
table ``$_table`` to jump (with ``goto``) to the immediate code representing
the ``case`` statement. If ``$cc`` is not a string, it will have to do the
usual *if/else if/else* dance. In this case, it will eventually end up on the
``default`` case.

Looking at the graph generated by vld_ for this optimised construct, we see
this new structure as well:

.. image:: images/switch-php72.png

Especially with big ``switch``/``case`` structures this is a welcome
optimisation!

Howeverâ€¦

Xdebug_ implements `code coverage`_ gathering functionality. This can be used
with `PHP_CodeCoverage`_ to see which parts of your code, which branches, and
which paths_ are covered while executing your tests. In order for Xdebug_ to
figure out the branches and paths, it has to follow PHP's internal opcode
structures to see where jump instructions happen. I had to add support for
this new ``switch``/``case`` optimisation to make this work again. This has
now been done_, and is part of Xdebug's master branch. This branch will soon
become the first beta release of Xdebug 2.6 which will provide support for PHP
7.2.

.. _Xdebug: https://xdebug.org
.. _`code coverage`: https://xdebug.org/docs/code_coverage
.. _`PHP_CodeCoverage`: https://github.com/sebastianbergmann/php-code-coverage
.. _paths: /path-branch-coverage.html
.. _done: https://github.com/xdebug/xdebug/commit/331c3ec9071ba739951530ec6686d67859291f6a
